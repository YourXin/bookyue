<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.bookyue.mapper.BookCollectMapper">
	<resultMap id="BaseResultMap"
		type="com.bookyue.model.BookCollect">
		<id column="id" jdbcType="INTEGER" property="id" />
		<result column="user_id" jdbcType="INTEGER" property="userId" />
		<result column="book_id" jdbcType="INTEGER" property="bookId" />
		<result column="book_name" jdbcType="VARCHAR"
			property="bookName" />
		<result column="book_pic_path" jdbcType="VARCHAR"
			property="bookPicPath" />
		<result column="book_sell_price" jdbcType="DECIMAL"
			property="bookSellPrice" />
		<result column="book_prime_price" jdbcType="DECIMAL"
			property="bookPrimePrice" />
		<result column="create_time" jdbcType="TIMESTAMP"
			property="createTime" />
	</resultMap>

	<resultMap id="CustomResultMap"
		type="com.bookyue.model.BookCollectCustom">
		<id column="id" jdbcType="INTEGER" property="id" />
		<result column="user_id" jdbcType="INTEGER" property="userId" />
		<result column="book_id" jdbcType="INTEGER" property="bookId" />
		<result column="book_name" jdbcType="VARCHAR"
			property="bookName" />
		<result column="book_pic_path" jdbcType="VARCHAR"
			property="bookPicPath" />
		<result column="book_sell_price" jdbcType="DECIMAL"
			property="bookSellPrice" />
		<result column="book_prime_price" jdbcType="DECIMAL"
			property="bookPrimePrice" />
		<result column="create_time" jdbcType="TIMESTAMP"
			property="createTime" />
		<result column="seller_user_avatar_url" jdbcType="VARCHAR"
			property="sellerUserAvatarUrl" />
		<result column="seller_username" jdbcType="VARCHAR"
			property="sellerUsername" />
		<result column="seller_usersex" jdbcType="SMALLINT"
			property="sellerUserSex" />
	</resultMap>

	<sql id="Example_Where_Clause">
		<where>
			<foreach collection="oredCriteria" item="criteria"
				separator="or">
				<if test="criteria.valid">
					<trim prefix="(" prefixOverrides="and" suffix=")">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value} and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach close=")" collection="criterion.value"
										item="listItem" open="(" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Update_By_Example_Where_Clause">
		<where>
			<foreach collection="example.oredCriteria" item="criteria"
				separator="or">
				<if test="criteria.valid">
					<trim prefix="(" prefixOverrides="and" suffix=")">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value} and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach close=")" collection="criterion.value"
										item="listItem" open="(" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Base_Column_List">
		id, user_id, book_id, book_name, book_pic_path, book_sell_price,
		book_prime_price,
		create_time
	</sql>
	<select id="selectByExample"
		parameterType="com.bookyue.model.BookCollectExample"
		resultMap="BaseResultMap">
		select
		<if test="distinct">
			distinct
		</if>
		'true' as QUERYID,
		<include refid="Base_Column_List" />
		from book_collect
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
		<if test="orderByClause != null">
			order by ${orderByClause}
		</if>
	</select>
	<select id="selectByPrimaryKey"
		parameterType="java.lang.Integer" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from book_collect
		where id = #{id,jdbcType=INTEGER}
	</select>
	<delete id="deleteByPrimaryKey"
		parameterType="java.lang.Integer">
		delete from book_collect
		where id = #{id,jdbcType=INTEGER}
	</delete>
	<delete id="deleteByExample"
		parameterType="com.bookyue.model.BookCollectExample">
		delete from book_collect
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</delete>
	<insert id="insert" parameterType="com.bookyue.model.BookCollect">
		insert into book_collect (id, user_id, book_id,
		book_name, book_pic_path, book_sell_price,
		book_prime_price, create_time)
		values (#{id,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER},
		#{bookId,jdbcType=INTEGER},
		#{bookName,jdbcType=VARCHAR}, #{bookPicPath,jdbcType=VARCHAR}, #{bookSellPrice,jdbcType=DECIMAL},
		#{bookPrimePrice,jdbcType=DECIMAL}, #{createTime,jdbcType=TIMESTAMP})
	</insert>
	<insert id="insertSelective"
		parameterType="com.bookyue.model.BookCollect">
		insert into book_collect
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="id != null">
				id,
			</if>
			<if test="userId != null">
				user_id,
			</if>
			<if test="bookId != null">
				book_id,
			</if>
			<if test="bookName != null">
				book_name,
			</if>
			<if test="bookPicPath != null">
				book_pic_path,
			</if>
			<if test="bookSellPrice != null">
				book_sell_price,
			</if>
			<if test="bookPrimePrice != null">
				book_prime_price,
			</if>
			<if test="createTime != null">
				create_time,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="id != null">
				#{id,jdbcType=INTEGER},
			</if>
			<if test="userId != null">
				#{userId,jdbcType=INTEGER},
			</if>
			<if test="bookId != null">
				#{bookId,jdbcType=INTEGER},
			</if>
			<if test="bookName != null">
				#{bookName,jdbcType=VARCHAR},
			</if>
			<if test="bookPicPath != null">
				#{bookPicPath,jdbcType=VARCHAR},
			</if>
			<if test="bookSellPrice != null">
				#{bookSellPrice,jdbcType=DECIMAL},
			</if>
			<if test="bookPrimePrice != null">
				#{bookPrimePrice,jdbcType=DECIMAL},
			</if>
			<if test="createTime != null">
				#{createTime,jdbcType=TIMESTAMP},
			</if>
		</trim>
	</insert>
	<select id="countByExample"
		parameterType="com.bookyue.model.BookCollectExample"
		resultType="java.lang.Long">
		select count(*) from book_collect
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</select>
	<update id="updateByExampleSelective" parameterType="map">
		update book_collect
		<set>
			<if test="record.id != null">
				id = #{record.id,jdbcType=INTEGER},
			</if>
			<if test="record.userId != null">
				user_id = #{record.userId,jdbcType=INTEGER},
			</if>
			<if test="record.bookId != null">
				book_id = #{record.bookId,jdbcType=INTEGER},
			</if>
			<if test="record.bookName != null">
				book_name = #{record.bookName,jdbcType=VARCHAR},
			</if>
			<if test="record.bookPicPath != null">
				book_pic_path = #{record.bookPicPath,jdbcType=VARCHAR},
			</if>
			<if test="record.bookSellPrice != null">
				book_sell_price = #{record.bookSellPrice,jdbcType=DECIMAL},
			</if>
			<if test="record.bookPrimePrice != null">
				book_prime_price = #{record.bookPrimePrice,jdbcType=DECIMAL},
			</if>
			<if test="record.createTime != null">
				create_time = #{record.createTime,jdbcType=TIMESTAMP},
			</if>
		</set>
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByExample" parameterType="map">
		update book_collect
		set id = #{record.id,jdbcType=INTEGER},
		user_id = #{record.userId,jdbcType=INTEGER},
		book_id = #{record.bookId,jdbcType=INTEGER},
		book_name = #{record.bookName,jdbcType=VARCHAR},
		book_pic_path = #{record.bookPicPath,jdbcType=VARCHAR},
		book_sell_price = #{record.bookSellPrice,jdbcType=DECIMAL},
		book_prime_price = #{record.bookPrimePrice,jdbcType=DECIMAL},
		create_time = #{record.createTime,jdbcType=TIMESTAMP}
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByPrimaryKeySelective"
		parameterType="com.bookyue.model.BookCollect">
		update book_collect
		<set>
			<if test="userId != null">
				user_id = #{userId,jdbcType=INTEGER},
			</if>
			<if test="bookId != null">
				book_id = #{bookId,jdbcType=INTEGER},
			</if>
			<if test="bookName != null">
				book_name = #{bookName,jdbcType=VARCHAR},
			</if>
			<if test="bookPicPath != null">
				book_pic_path = #{bookPicPath,jdbcType=VARCHAR},
			</if>
			<if test="bookSellPrice != null">
				book_sell_price = #{bookSellPrice,jdbcType=DECIMAL},
			</if>
			<if test="bookPrimePrice != null">
				book_prime_price = #{bookPrimePrice,jdbcType=DECIMAL},
			</if>
			<if test="createTime != null">
				create_time = #{createTime,jdbcType=TIMESTAMP},
			</if>
		</set>
		where id = #{id,jdbcType=INTEGER}
	</update>
	<update id="updateByPrimaryKey"
		parameterType="com.bookyue.model.BookCollect">
		update book_collect
		set user_id = #{userId,jdbcType=INTEGER},
		book_id = #{bookId,jdbcType=INTEGER},
		book_name = #{bookName,jdbcType=VARCHAR},
		book_pic_path = #{bookPicPath,jdbcType=VARCHAR},
		book_sell_price = #{bookSellPrice,jdbcType=DECIMAL},
		book_prime_price = #{bookPrimePrice,jdbcType=DECIMAL},
		create_time = #{createTime,jdbcType=TIMESTAMP}
		where id = #{id,jdbcType=INTEGER}
	</update>

	<!-- 自定义查询 selectByUserId -->
	<select id="selectByUserId" parameterType="java.lang.Integer"
		resultMap="CustomResultMap">
		SELECT id, bc.user_id, book_id, book_name, book_pic_path,
		book_sell_price,
		book_prime_price,bc.create_time,
		u.user_name as seller_username,
		u.user_sex as seller_usersex,
		u.user_avatar_url as seller_user_avatar_url
		FROM
		book_collect bc,user_info u
		WHERE
		bc.user_id=u.user_id
		AND
		bc.user_id=#{userId,jdbcType=INTEGER}
		ORDER BY
		bc.create_time DESC
	</select>

</mapper>